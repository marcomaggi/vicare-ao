\input texinfo.tex
@c %**start of header
@setfilename vicare-ao.info
@settitle Libao for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libao for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/AO

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-ao

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2015

@c ------------------------------------------------------------

@set FOREIGN_PACKAGE            @libao{}
@set FOREIGN_VERSION            1.2.0
@set FOREIGN_URL                @url{http:/@//@/xiph.org/@/}
@set FOREIGN_SCHEME_LIB         @library{vicare multimedia ao}
@set NAUSICAA_SCHEME_LIB        @library{nausicaa multimedia ao}
@set GITHUB_URL                 @url{http://github.com/marcomaggi/vicare-ao}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/vicare-ao}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/vicare-ao/downloads}
@set DOCUMENTATION_URL          @url{http://marcomaggi.github.io/docs/vicare-ao.html}
@set VICARE_HOMEPAGE_URL        @url{http://marcomaggi.github.io/vicare.html}

@macro libao{}
Libao
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the
@value{FOREIGN_PACKAGE} C language library.  Libao is a cross--platform
audio library that allows programs to output audio using a simple @api{}
on a wide variety of platforms.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
@value{FOREIGN_PACKAGE} is available at:

@center @value{FOREIGN_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-ao: (vicare-ao).       @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain programming interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @value{FOREIGN_PACKAGE} C language library.
@value{FOREIGN_PACKAGE} is a cross--platform audio library that allows
programs to output audio using a simple @api{} on a wide variety of
platforms.

The last time the author bothered to update this paragraph, he had
tested @value{FOREIGN_PACKAGE} version @value{FOREIGN_VERSION}; the
@value{FOREIGN_PACKAGE} library is available at:

@center @value{FOREIGN_URL}

The package installs a C language library implementing wrapper C
functions for the C language @value{FOREIGN_PACKAGE} library; on top of
this, the Scheme library @library{vicare multimedia ao} exports one
binding for each @value{FOREIGN_PACKAGE} public function; additionally
the library @library{vicare multimedia ao constants} exports one binding
for each constant value defined in the C language header @file{ao.h}.

The following Scheme libraries are installed:

@table @asis
@item @library{vicare multimedia ao}
@cindex Library @library{vicare multimedia ao}
@cindex @library{vicare multimedia ao}, library
It exports one binding for each @value{FOREIGN_PACKAGE} public function.
All the Scheme function names are directly derived from the C function
names by replacing underscore characters @samp{_} with dash characters
@samp{-}; so @cfunc{ao_doit} becomes @func{ao-doit}.

@item @library{vicare multimedia ao unsafe-capi}
@cindex Library @library{vicare multimedia ao unsafe-capi}
@cindex @library{vicare multimedia ao unsafe-capi}, library
It exports one syntax binding for each @value{FOREIGN_PACKAGE} public
function.  All the Scheme syntax names are directly derived from the C
function names by replacing underscore characters @samp{_} with dash
characters @samp{-}; so @cfunc{ao_doit} becomes @func{ao-doit}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item @library{vicare multimedia ao constants}
@cindex Library @library{vicare multimedia ao constants}
@cindex @library{vicare multimedia ao constants}, library
It exports one binding for each constant value defined in the C language
header @file{ao.h}.

@item @library{vicare multimedia ao features}
@cindex Library @library{vicare multimedia ao features}
@cindex @library{vicare multimedia ao features}, library
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.

@item @library{vicare multimedia ao cond-expand}
@cindex Library @library{vicare multimedia ao cond-expand}
@cindex @library{vicare multimedia ao cond-expand}, library
Export a syntactic binding to determine at expand time which functions
are available.
@end table

Scheme libraries are installed under the directory:

@center @file{$(libdir)/vicare-scheme}

This document contains only a brief description of the functions: refer
to the @value{FOREIGN_PACKAGE}'s documentation for details.

@c page
@node plain
@chapter Plain programming interface


@cindex Library @value{FOREIGN_SCHEME_LIB}
@cindex @value{FOREIGN_SCHEME_LIB}, library


The library @value{FOREIGN_SCHEME_LIB} implements the high level @api{}
for @value{FOREIGN_PACKAGE}.

@menu
* plain version::               @value{PACKAGE} version informations.
* plain init::                  Library initialisation and finalisation.
* plain option::                Device option objects.
* plain info::                  Device driver informations.
* plain misc::                  Miscellaneous operations.
@end menu

@c page
@node plain version
@section @value{PACKAGE} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun vicare-ao-version-interface-current
@defunx vicare-ao-version-interface-revision
@defunx vicare-ao-version-interface-age
Return a fixnum representing a version number.
@end defun


@defun vicare-ao-version
Return a Scheme string representing the version number.
@end defun

@c page
@node plain init
@section Library initialisation and finalisation


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-initialize
@defunx ao-initialise
Initialises the internal @libao{} data structures and loads all of the
available plugins.  The system and user configuration files are also
read at this time if available.  This function must be called in the
main thread and before any other @libao{} functions can be used.

This Scheme function can be called any number of times: the first time
it will initialise the library, subsequent times nothing happens.  After
a call to @func{ao-shutdown}: the first call to @func{ao-initialize}
will initialise the library again.
@end defun


@defun ao-shutdown
Unload all of the plugins and deallocates any internal data structures
the library has created.  It should be called prior to program exit.

This Scheme function can be called any number of times: only if the
library is currently initialised, it will shut it down; otherwise
nothing happens.
@end defun

@c page
@node plain option
@section Device option objects


@menu
* plain option struct::         Device option data structure.
* plain option ops::            Operating on device option objects.
@end menu

@c page
@node plain option struct
@subsection Option data structure


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deftp {Struct Type} ao-option
@cindex Argument @var{option}
@cindex @var{option} argument
Opaque structure type referencing an instance of the C language type
@code{ao_option}.  When instances of this type are used as
arguments to functions: this documentation identifies them as
@var{option}.

Instances of this type must be finalised with
@func{ao-option-finalise}; whenever an instance of this type is
garbage collected: @func{ao-option-finalise} is automatically
applied to it and any error ignored.

In certain contexts, instances of this type own the referenced
@code{ao_option} value, in other contexts they do not:

@itemize
@item
Finalising a @objtype{ao-option} instance owning the
@code{ao_option} value, causes finalisation of the
@code{ao_option} value too.

@item
Finalising a @objtype{ao-option} instance @strong{not} owning the
@code{ao_option} value, leaves the @code{ao_option} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun ao-option? @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{ao-option};
otherwise return @false{}.
@end defun


@defun ao-option?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{ao-option} and it
has not been finalised; return @false{} otherwise.
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun ao-option-putprop @var{option} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{option};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun ao-option-getprop @var{option} @var{key}
Return the value of the property @var{key} in the property list of
@var{option}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun ao-option-remprop @var{option} @var{key}
Remove the property @var{key} from the property list of @var{option}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun ao-option-property-list @var{option}
Return a new association list representing the property list of
@var{option}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Custom destructor


@defun option-custom-destructor @var{option}
@defunx set-option-custom-destructor! @var{option} @var{func}
Retrieve or set a destructor function associated to @var{option}.

Whenever @var{option} is finalised, either explicitly with
@func{ao-option-finalise} or implicitly by the garbage collector,
@var{func} is applied to @var{option} before the internal state of
@var{option} is destroyed.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun ao-option-hash @var{option}
Return an exact integer to be used as hashtable key for @var{option}.
Hashtables having a @objtype{ao-option} as key can be instantiated
as follows:

@example
(make-hashtable ao-option-hash eq?)
@end example
@end defun

@c page
@node plain option ops
@subsection Operating on option objects


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-append-option @var{opt} @var{key} @var{val}
When the argument @var{opt} is @false{}: build and return a new
@objtype{ao-option} struct initialised with the single entry represented
by @var{key} and @var{val}.  When successful: return the
@objtype{ao-option} struct; if an error occurs: return @false{}.

When the argument @var{opt} is a live @objtype{ao-option}: append a
@var{key}/@var{val} pair to the linked list of options.  When
successful: return @var{opt} itself; if an error occurs: return
@false{}.

The arguments @var{key} and @var{val} must be generalised C strings with
@ascii{} representation (@libsref{cbuffers strings, Introduction to
generalised C strings}).
@end defun


@defun ao-free-options @var{option}
Finalise @var{option}; return unspecified values.  It is fine to apply
this function multiple times to the same @var{option} value: the first
time the underlying data is finalised, the subsequent times nothing
happens.

If this function is applied to an @var{option} value not owning the
underlying @code{ao_option} value: @var{option} is finalised, but the
@code{ao_option} value is left alone.
@end defun


@defun ao-option->alist @var{option}
Build and return an alist of Scheme strings representing the list of
options in @var{option}.
@end defun


@defun ao-append-global-option @var{key} @var{val}
Append a key--value pair to the internal linked list of global options
obeyed by @libao{} itself, as well as passed to any driver in use.
@var{key} and @var{val} must be generalised C strings with @ascii{}
representation (@libsref{cbuffers strings, Introduction to generalised C
strings}).
@end defun


Usage example:

@lisp
(import (vicare)
  (prefix (vicare multimedia ao) ao.))

(define opt
  (ao.ao-append-option #f "client_name" "My Spiffy App"))

(ao.ao-option->alist opt)
@result{} (("client_name" . "My Spiffy App"))

(ao.ao-free-options opt)
@end lisp

@c page
@node plain info
@section Device driver informations


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-driver-id
@end defun


@defun ao-default-driver-id
@end defun


@defun ao-driver-info
@end defun


@defun ao-driver-info-list
@end defun


@defun ao-file-extension
@end defun

@c page
@node plain misc
@section Miscellaneous operations


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@c ------------------------------------------------------------------------
@c device setup/playback/teardown

@defun ao-open-live
@end defun


@defun ao-open-file
@end defun


@defun ao-play
@end defun


@defun ao-close
@end defun


@c ------------------------------------------------------------------------

@c miscellaneous


@defun ao-is-big-endian
@end defun


@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
the home page of the Vicare project is at:

@center @value{VICARE_HOMEPAGE_URL}

@noindent
@value{FOREIGN_PACKAGE} can be found here:

@center @value{FOREIGN_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

