\input texinfo.tex
@c %**start of header
@setfilename vicare-ao.info
@settitle Libao for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libao for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/AO

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-ao

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2015

@c ------------------------------------------------------------

@set FOREIGN_PACKAGE            @libao{}
@set FOREIGN_VERSION            1.2.0
@set FOREIGN_URL                @url{http:/@//@/xiph.org/@/}
@set FOREIGN_SCHEME_LIB         @library{vicare multimedia ao}
@set NAUSICAA_SCHEME_LIB        @library{nausicaa multimedia ao}
@set GITHUB_URL                 @url{http://github.com/marcomaggi/vicare-ao}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/vicare-ao}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/vicare-ao/downloads}
@set DOCUMENTATION_URL          @url{http://marcomaggi.github.io/docs/vicare-ao.html}
@set VICARE_HOMEPAGE_URL        @url{http://marcomaggi.github.io/vicare.html}

@macro libao{}
Libao
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the
@value{FOREIGN_PACKAGE} C language library.  Libao is a cross--platform
audio library that allows programs to output audio using a simple @api{}
on a wide variety of platforms.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
@value{FOREIGN_PACKAGE} is available at:

@center @value{FOREIGN_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-ao: (vicare-ao).       @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain programming interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @value{FOREIGN_PACKAGE} C language library.
@value{FOREIGN_PACKAGE} is a cross--platform audio library that allows
programs to output audio using a simple @api{} on a wide variety of
platforms.

The last time the author bothered to update this paragraph, he had
tested @value{FOREIGN_PACKAGE} version @value{FOREIGN_VERSION}; the
@value{FOREIGN_PACKAGE} library is available at:

@center @value{FOREIGN_URL}

The package installs a C language library implementing wrapper C
functions for the C language @value{FOREIGN_PACKAGE} library; on top of
this, the Scheme library @library{vicare multimedia ao} exports one
binding for each @value{FOREIGN_PACKAGE} public function; additionally
the library @library{vicare multimedia ao constants} exports one binding
for each constant value defined in the C language header @file{ao.h}.

The following Scheme libraries are installed:

@table @asis
@item @library{vicare multimedia ao}
@cindex Library @library{vicare multimedia ao}
@cindex @library{vicare multimedia ao}, library
It exports one binding for each @value{FOREIGN_PACKAGE} public function.
All the Scheme function names are directly derived from the C function
names by replacing underscore characters @samp{_} with dash characters
@samp{-}; so @cfunc{ao_doit} becomes @func{ao-doit}.

@item @library{vicare multimedia ao unsafe-capi}
@cindex Library @library{vicare multimedia ao unsafe-capi}
@cindex @library{vicare multimedia ao unsafe-capi}, library
It exports one syntax binding for each @value{FOREIGN_PACKAGE} public
function.  All the Scheme syntax names are directly derived from the C
function names by replacing underscore characters @samp{_} with dash
characters @samp{-}; so @cfunc{ao_doit} becomes @func{ao-doit}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item @library{vicare multimedia ao constants}
@cindex Library @library{vicare multimedia ao constants}
@cindex @library{vicare multimedia ao constants}, library
It exports one binding for each constant value defined in the C language
header @file{ao.h}.

@item @library{vicare multimedia ao features}
@cindex Library @library{vicare multimedia ao features}
@cindex @library{vicare multimedia ao features}, library
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.

@item @library{vicare multimedia ao cond-expand}
@cindex Library @library{vicare multimedia ao cond-expand}
@cindex @library{vicare multimedia ao cond-expand}, library
Export a syntactic binding to determine at expand time which functions
are available.
@end table

Scheme libraries are installed under the directory:

@center @file{$(libdir)/vicare-scheme}

This document contains only a brief description of the functions: refer
to the @value{FOREIGN_PACKAGE}'s documentation for details.

@c page
@node plain
@chapter Plain programming interface


@cindex Library @value{FOREIGN_SCHEME_LIB}
@cindex @value{FOREIGN_SCHEME_LIB}, library


The library @value{FOREIGN_SCHEME_LIB} implements the high level @api{}
for @value{FOREIGN_PACKAGE}.

@menu
* plain version::               @value{PACKAGE} version informations.
* plain init::                  Library initialisation and finalisation.
* plain option::                Device option objects.
* plain device::                Audio device objects.
* plain samples::               Describing audio samples.
* plain playback::              Playing sounds.
* plain misc::                  Miscellaneous operations.
* plain examples::              Usage examples.
@end menu

@c page
@node plain version
@section @value{PACKAGE} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun vicare-ao-version-interface-current
@defunx vicare-ao-version-interface-revision
@defunx vicare-ao-version-interface-age
Return a fixnum representing a version number.
@end defun


@defun vicare-ao-version
Return a Scheme string representing the version number.
@end defun

@c page
@node plain init
@section Library initialisation and finalisation


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-initialize
@defunx ao-initialise
Initialises the internal @libao{} data structures and loads all of the
available plugins.  The system and user configuration files are also
read at this time if available.  This function must be called in the
main thread and before any other @libao{} functions can be used.

This Scheme function can be called any number of times: the first time
it will initialise the library, subsequent times nothing happens.  After
a call to @func{ao-shutdown}: the first call to @func{ao-initialize}
will initialise the library again.
@end defun


@defun ao-shutdown
Unload all of the plugins and deallocates any internal data structures
the library has created.  It should be called prior to program exit.

This Scheme function can be called any number of times: only if the
library is currently initialised, it will shut it down; otherwise
nothing happens.
@end defun

@c page
@node plain option
@section Device option objects


@menu
* plain option struct::         Device option data structure.
* plain option ops::            Operating on device option objects.
@end menu

@c page
@node plain option struct
@subsection Option data structure


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deftp {Struct Type} ao-option
@cindex Argument @var{option}
@cindex @var{option} argument
Opaque structure type referencing an instance of the C language type
@code{ao_option}.  When instances of this type are used as arguments to
functions: this documentation identifies them as @var{option}.

Instances of this type must be finalised with @func{ao-free-options};
whenever an instance of this type is garbage collected:
@func{ao-free-options} is automatically applied to it and any error
ignored.

In certain contexts, instances of this type own the referenced
@code{ao_option} value, in other contexts they do not:

@itemize
@item
Finalising a @objtype{ao-option} instance owning the
@code{ao_option} value, causes finalisation of the
@code{ao_option} value too.

@item
Finalising a @objtype{ao-option} instance @strong{not} owning the
@code{ao_option} value, leaves the @code{ao_option} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun ao-option? @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{ao-option};
otherwise return @false{}.
@end defun


@defun ao-option?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{ao-option} and it
has not been finalised; return @false{} otherwise.
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun ao-option-putprop @var{option} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{option};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun ao-option-getprop @var{option} @var{key}
Return the value of the property @var{key} in the property list of
@var{option}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun ao-option-remprop @var{option} @var{key}
Remove the property @var{key} from the property list of @var{option}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun ao-option-property-list @var{option}
Return a new association list representing the property list of
@var{option}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Custom destructor


@defun option-custom-destructor @var{option}
@defunx set-option-custom-destructor! @var{option} @var{func}
Retrieve or set a destructor function associated to @var{option}.

Whenever @var{option} is finalised, either explicitly with
@func{ao-free-options} or implicitly by the garbage collector,
@var{func} is applied to @var{option} before the internal state of
@var{option} is destroyed.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun ao-option-hash @var{option}
Return an exact integer to be used as hashtable key for @var{option}.
Hashtables having a @objtype{ao-option} as key can be instantiated
as follows:

@example
(make-hashtable ao-option-hash eq?)
@end example
@end defun

@c page
@node plain option ops
@subsection Operating on option objects


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-append-option @var{opt} @var{key} @var{val}
When the argument @var{opt} is @false{}: build and return a new
@objtype{ao-option} struct initialised with the single entry represented
by @var{key} and @var{val}.  When successful: return the
@objtype{ao-option} struct; if an error occurs: return @false{}.

When the argument @var{opt} is a live @objtype{ao-option}: append a
@var{key}/@var{val} pair to the linked list of options.  When
successful: return @var{opt} itself; if an error occurs: return
@false{}.

The arguments @var{key} and @var{val} must be generalised C strings with
@ascii{} representation (@libsref{cbuffers strings, Introduction to
generalised C strings}).
@end defun


@defun ao-free-options @var{option}
Finalise @var{option}; return unspecified values.  It is fine to apply
this function multiple times to the same @var{option} value: the first
time the underlying data is finalised, the subsequent times nothing
happens.

If this function is applied to an @var{option} value not owning the
underlying @code{ao_option} value: @var{option} is finalised, but the
@code{ao_option} value is left alone.
@end defun


@defun ao-option->alist @var{option}
Build and return an alist of Scheme strings representing the list of
options in @var{option}.
@end defun


@defun ao-append-global-option @var{key} @var{val}
Append a key--value pair to the internal linked list of global options
obeyed by @libao{} itself, as well as passed to any driver in use.
@var{key} and @var{val} must be generalised C strings with @ascii{}
representation (@libsref{cbuffers strings, Introduction to generalised C
strings}).
@end defun


Usage example:

@lisp
(import (vicare)
  (prefix (vicare multimedia ao) ao.))

(define opt
  (ao.ao-append-option #f "client_name" "My Spiffy App"))

(ao.ao-option->alist opt)
@result{} (("client_name" . "My Spiffy App"))

(ao.ao-free-options opt)
@end lisp

@c page
@node plain device
@section Audio device objects


@menu
* plain device info::           Device driver informations.
* plain device structs::        Device driver structs.
@end menu

@c page
@node plain device info
@subsection Device driver informations


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-driver-id @var{short-name}
Given the short name of a supported driver: return its numeric
identifier.  If successful: return a positive exact integer; otherwise
return @false{}.

The argument @var{short-name} be a generalised C string with @ascii{}
representation (@libsref{cbuffers strings, Introduction to generalised C
strings}).

@lisp
(import (vicare)
  (prefix (vicare multimedia ao) ao.))

(ao.ao-driver-id "alsa")
@result{} 1

(ao.ao-driver-id "oss")
@result{} 2
@end lisp
@end defun


@defun ao-default-driver-id
Return the numeric identifier of the default driver.

@lisp
(import (vicare)
  (prefix (vicare multimedia ao) ao.))

(ao.ao-default-driver-id)
@result{} 1
@end lisp
@end defun


@deftp {Struct Type} ao-info
Scheme representation of the C language struct @code{ao_info}.  It has
the following fields:

@table @code
@item type
One of the exact integers: AO_TYPE_LIVE, AO_TYPE_FILE.

@item name
A Scheme string representing the full name of the driver.

@item short-name
A Scheme string representing the short name of the driver.

@item comment
A Scheme string representing the driver description.

@item preferred-byte-format
An exact integer specifying the preferred ordering of the sample bytes.
Using the driver with this byte format usually results in slightly less
memory usage and slightly less CPU usage because a swap buffer will not
be needed.

@item priority
A positive exact integer ranking how likely it is for this driver to be
the default.  The default driver will be a functioning driver with
highest priority.

@item options
A list of strings representing the list of option keys accepted by this
driver.
@end table
@end deftp


@defun ao-info? @var{obj}
Return @true{} if @var{obj} is a struct of type @objtype{ao-info};
return @false{} otherwise.
@end defun


@defun ao-info-type @var{info}
@defunx ao-info-name @var{info}
@defunx ao-info-short-name @var{info}
@defunx ao-info-comment @var{info}
@defunx ao-info-preferred-byte-format @var{info}
@defunx ao-info-priority @var{info}
Accessors for the fields of @objtype{ao-info} structs.
@end defun


@defun ao-driver-info @var{id}
Given the numeric identifier of a driver: build and return a struct of
type @objtype{ao-info} describing the driver.  If @var{id} is invalid:
return @false{}.
@end defun


@defun ao-driver-info-list
Return a list of @objtype{ao-info} structs describing the available
drivers.
@end defun


@defun ao-file-extension @var{id}
Given the numeric identifier of a driver return its associated file
extension as Scheme string.

@quotation
@strong{NOTE} In @libao{} version 1.2.0 this function appears to be not
available.
@end quotation
@end defun

@c page
@node plain device structs
@subsection Device driver structs


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deftp {Struct Type} ao-device
@cindex Argument @var{device}
@cindex @var{device} argument
Opaque structure type referencing an instance of the C language type
@code{ao_device}.  When instances of this type are used as arguments to
functions: this documentation identifies them as @var{device}.

Instances of this type must be finalised with @func{ao-close}; whenever
an instance of this type is garbage collected: @func{ao-close} is
automatically applied to it and any error ignored.

In certain contexts, instances of this type own the referenced
@code{ao_device} value, in other contexts they do not:

@itemize
@item
Finalising a @objtype{ao-device} instance owning the @code{ao_device}
value, causes finalisation of the @code{ao_device} value too.

@item
Finalising a @objtype{ao-device} instance @strong{not} owning the
@code{ao_device} value, leaves the @code{ao_device} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun ao-device? @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{ao-device};
otherwise return @false{}.
@end defun


@defun ao-device?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{ao-device} and it
has not been finalised; return @false{} otherwise.
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun ao-device-putprop @var{device} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{device};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun ao-device-getprop @var{device} @var{key}
Return the value of the property @var{key} in the property list of
@var{device}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun ao-device-remprop @var{device} @var{key}
Remove the property @var{key} from the property list of @var{device}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun ao-device-property-list @var{device}
Return a new association list representing the property list of
@var{device}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Custom destructor


@defun device-custom-destructor @var{device}
@defunx set-device-custom-destructor! @var{device} @var{func}
Retrieve or set a destructor function associated to @var{device}.

Whenever @var{device} is finalised, either explicitly with
@func{ao-close} or implicitly by the garbage collector, @var{func} is
applied to @var{device} before the internal state of @var{device} is
destroyed.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun ao-device-hash @var{device}
Return an exact integer to be used as hashtable key for @var{device}.
Hashtables having a @objtype{ao-device} as key can be instantiated as
follows:

@example
(make-hashtable ao-device-hash eq?)
@end example
@end defun

@c page
@node plain samples
@section Describing audio samples


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deftp {Object Type} ao-sample-format
Describe the structure of audio samples.  It has the following fields:

@table @code
@item bits
Positive exact integer representing the number of bits per sample.  It
must be an exact multiple of @math{8}.

@item rate
Positive exact integer representing the number of samples per second (in
a single channel).

@item channels
Positive exact integer representing the number of audio channels.

@item byte-format
Byte ordering in sample.  It must be one among the constants:
@code{AO_FMT_LITTLE} ,@code{AO_FMT_BIG} ,@code{AO_FMT_NATIVE}.

@item matrix
Channel input matrix.  It must be @false{} or a generalised C string
with @ascii{} representation (@libsref{cbuffers strings, Introduction to
generalised C strings}).  See @libao{}'s documentation for its format.
@end table
@end deftp


@defun make-ao-sample-format
Build and return an object of type @objtype{ao-sample-format}.
@end defun


@defun ao-sample-format? @var{obj}
Return @true{} if @var{obj} is an object of type
@objtype{ao-sample-format}.
@end defun


@defun ao-sample-format-bits @var{format}
@defunx ao-sample-format-rate @var{format}
@defunx ao-sample-format-channels @var{format}
@defunx ao-sample-format-byte-format @var{format}
@defunx ao-sample-format-matrix @var{format}
Accessors for the fields of @objtype{ao-sample-format} objects.
@end defun

@c page
@node plain playback
@section Playing sounds


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-open-live @var{driver-id} @var{sample-format} @var{options}
Open a live playback audio device for output.  When successful return an
object of type @objtype{ao-driver}.  If an error occurs opening the
device: raise an exception; notice that, in case of error, @libao{} will
print messages on the process's standard error file descriptor.

@var{driver-id} must be an exact integer representing a device
identifier, as returned by @func{ao-driver-id} or
@func{ao-default-driver-id}.

@var{sample-format} must be an object of type
@objtype{ao-sample-format}.

@var{options} must be @false{} or an object of type @objtype{ao-option}.
@end defun


@defun ao-open-file
@end defun


@defun ao-play @var{device} @var{samples}
Play a block of audio data to an open device.  When successful return
@true{}; otherwise return @false{}.  @var{device} must be an object of
type @objtype{ao-device}.  @var{samples} must be a bytevector
representing the output samples.

The samples must be made available in a bytevector representing an array
of 32-bit slots; each with format:

@example
 channel 1 LSB channel 2 LSB channel 1 MSB channel 2 MSB
|-------------|-------------|-------------|-------------|
@end example

@noindent
where @acronym{}LSB stands for Least Significant Byte and @acronym{MSB}
stands for Most Significant Byte.
@end defun


@defun ao-close @var{device}
Finalise @var{device}; return @true{} if the finalisation is successful,
otherwise return @false{}.  It is fine to apply this function multiple
times to the same @var{device} value: the first time the underlying data
structure is finalised, the subsequent times nothing happens.

If this function is applied to a @var{device} value not owning the
underlying @code{ao_device} value: @var{device} is finalised, but the
@code{ao_device} value is left alone.
@end defun

@c page
@node plain misc
@section Miscellaneous operations


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun ao-is-big-endian
Return a boolean: true if the host is big endian; false if the host is
little endian.
@end defun

@c page
@node plain examples
@section Usage examples


We will generate some notes using mostly sinusoidal waveforms.  It is
useful to know the frequencies of notes.

@float
@multitable {Note} {Note} {Freq (Hz)}
@headitem Note @tab Note @tab Freq (Hz)
@item A4 @tab La  @tab  440.00
@item B4 @tab Si  @tab  493.88
@item C5 @tab Do  @tab  523.25
@item D5 @tab Re  @tab  587.33
@item E5 @tab Mi  @tab  659.25
@item F5 @tab Fa  @tab  698.46
@item G5 @tab Sol @tab  783.99
@item A5 @tab La  @tab  880.00
@item B5 @tab Si  @tab  987.77
@item C6 @tab Do  @tab 1046.50
@end multitable
@caption{Some notes frequencies in Hertz.}
@end float

All the examples are meant to have the following preamble:

@smalllisp
(import (vicare)
  (prefix (vicare multimedia ao) ao.)
  (prefix (vicare multimedia ao constants) ao.)
  (vicare numerics constants))

(ao.ao-initialise)

(define-constant A4   440.00)
(define-constant B4   493.88)
(define-constant C5   523.25)
(define-constant D5   587.33)
(define-constant E5   659.25)
(define-constant F5   698.46)
(define-constant Fs5  739.995)
(define-constant G5   783.99)
(define-constant A5   880.00)
(define-constant B5   987.77)
(define-constant C6  1046.50)

(define sample-format
  (let ((bits         16)    ;how many bits per sample
        (rate         44100) ;how many samples per second
        (channels     2)
        (byte-format  ao.AO_FMT_LITTLE)
        (matrix       "L,R"))
    (ao.make-ao-sample-format bits rate channels byte-format matrix)))
@end smalllisp


Here is how we play a scale of notes, by generating a bytevector for
every note:

@smalllisp
(define device
  (let ((driver-options #f))
    (ao.ao-open-live (ao.ao-default-driver-id) sample-format driver-options)))

@end smalllisp

Here is how we play a scale of notes, by generating a single bytevector
for all the scale:

@smalllisp
(define device
  (let ((driver-options #f))
    (ao.ao-open-live (ao.ao-default-driver-id) sample-format driver-options)))

@end smalllisp

Here is how we play a bit of Black Sabbath's ``Iron Man'' song:

@smalllisp
(define device
  (let ((driver-options #f))
    (ao.ao-open-live (ao.ao-default-driver-id) sample-format driver-options)))

@end smalllisp

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
the home page of the Vicare project is at:

@center @value{VICARE_HOMEPAGE_URL}

@noindent
@value{FOREIGN_PACKAGE} can be found here:

@center @value{FOREIGN_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

